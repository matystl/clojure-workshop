;; Analyzed by ClojureScript 0.0-3211
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{flush}, :name re-frame.router, :imports nil, :requires {cljs.core.async cljs.core.async, re-frame.utils re-frame.utils, re-frame.handlers re-frame.handlers, reagent.core reagent.core}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, flush reagent.core, warn re-frame.utils, handle re-frame.handlers, put! cljs.core.async, error re-frame.utils}, :defs {dispatch-sync {:protocol-inline nil, :meta {:arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler, but avoid the async-inducing\n  use of core.async/chan.\n\n  Usage example:\n     (dispatch-sync [:delete-item 42])", :end-column 20, :end-line 83, :column 7, :line 83, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/router.cljs"}, :name re-frame.router/dispatch-sync, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljs", :end-column 20, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler, but avoid the async-inducing\n  use of core.async/chan.\n\n  Usage example:\n     (dispatch-sync [:delete-item 42])", :test true}, dispatch {:protocol-inline nil, :meta {:arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler.\n\n  Usage example:\n     (dispatch [:delete-item 42])\n  ", :end-column 15, :end-line 70, :column 7, :line 70, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/router.cljs"}, :name re-frame.router/dispatch, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljs", :end-column 15, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler.\n\n  Usage example:\n     (dispatch [:delete-item 42])\n  ", :test true}, router-loop {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 37, :column 7, :line 37, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/router.cljs"}, :name re-frame.router/router-loop, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, purge-chan {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "read all pending events from the channel and drop them on the floor", :end-column 17, :end-line 16, :column 7, :line 16, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/router.cljs"}, :name re-frame.router/purge-chan, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "read all pending events from the channel and drop them on the floor", :test true}, event-chan {:meta {:private true, :end-column 26, :end-line 14, :column 16, :line 14, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/router.cljs"}, :file "resources/public/js/compiled/out/re_frame/router.cljs", :line 14, :column 1, :end-line 14, :end-column 26, :private true, :test true, :name re-frame.router/event-chan}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:recur :flush-dom :else], :seen #{:else :recur :flush-dom}}, :doc nil}