;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name re-frame.utils, :imports nil, :requires {clojure.set clojure.set}, :uses {difference clojure.set}, :defs {first-in-vector {:protocol-inline nil, :meta {:arglists (quote ([v])), :end-column 22, :end-line 41, :column 7, :line 41, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/first-in-vector, :variadic false, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, error {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 12, :end-line 37, :column 7, :line 37, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/error, :variadic true, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, groupEnd {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 15, :end-line 36, :column 7, :line 36, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/groupEnd, :variadic true, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, group {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 12, :end-line 35, :column 7, :line 35, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/group, :variadic true, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, warn {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 11, :end-line 34, :column 7, :line 34, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/warn, :variadic true, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, log {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :end-column 10, :end-line 33, :column 7, :line 33, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/log, :variadic true, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists [[& args]], :test true}, set-loggers! {:protocol-inline nil, :meta {:arglists (quote ([new-loggers])), :doc "Change the set (subset?) of logging functions used by re-frame.\n  'new-loggers' should be a map which looks like default-loggers", :end-column 19, :end-line 25, :column 7, :line 25, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :name re-frame.utils/set-loggers!, :variadic false, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :end-column 19, :method-params ([new-loggers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-loggers])), :doc "Change the set (subset?) of logging functions used by re-frame.\n  'new-loggers' should be a map which looks like default-loggers", :test true}, loggers {:meta {:end-column 13, :end-line 23, :column 6, :line 23, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :line 23, :column 1, :end-line 23, :end-column 13, :test true, :name re-frame.utils/loggers}, default-loggers {:meta {:end-column 21, :end-line 15, :column 6, :line 15, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/re_frame/utils.cljs"}, :file "resources/public/js/compiled/out/re_frame/utils.cljs", :line 15, :column 1, :end-line 15, :end-column 21, :test true, :name re-frame.utils/default-loggers}}, :require-macros nil, :cljs.analyzer/constants {:order [:log :warn :error :group :groupEnd], :seen #{:group :warn :error :groupEnd :log}}, :doc nil}