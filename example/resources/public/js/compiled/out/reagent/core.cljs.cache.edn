;; Analyzed by ClojureScript 0.0-3211
{:defs {current-component {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function.", :end-column 24, :end-line 128, :column 7, :line 128, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/current-component, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function.", :test true}, as-component {:meta {:end-column 18, :end-line 85, :column 6, :line 85, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :file "resources/public/js/compiled/out/reagent/core.cljs", :line 85, :column 1, :end-line 85, :end-column 18, :test true, :name reagent.core/as-component}, adapt-react-class {:protocol-inline nil, :meta {:arglists (quote ([c])), :doc "Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms.", :end-column 24, :end-line 46, :column 7, :line 46, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/adapt-react-class, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms.", :test true}, atom {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & rest]), :arglists-meta (nil nil)}, :arglists (quote ([x] [x & rest])), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :end-column 11, :end-line 205, :column 7, :line 205, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/atom, :variadic true, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & rest]), :arglists-meta (nil nil)}, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists ([x] [x & rest]), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :test true}, merge-props {:protocol-inline nil, :meta {:arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo.", :end-column 18, :end-line 187, :column 7, :line 187, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/merge-props, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 18, :method-params ([defaults props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo.", :test true}, force-update-all {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.", :export true, :end-column 32, :end-line 95, :column 16, :line 95, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/force-update-all, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.", :test true}, as-element {:protocol-inline nil, :meta {:arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector.", :end-column 17, :end-line 41, :column 7, :line 41, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/as-element, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector.", :test true}, next-tick {:protocol-inline nil, :meta {:arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent.", :end-column 16, :end-line 268, :column 7, :line 268, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/next-tick, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent.", :test true}, props {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Returns the props passed to a component.", :end-column 12, :end-line 164, :column 7, :line 164, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/props, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the props passed to a component.", :test true}, state-atom {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Returns an atom containing a components state.", :end-column 17, :end-line 134, :column 7, :line 134, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/state-atom, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns an atom containing a components state.", :test true}, flush {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there.", :end-column 12, :end-line 193, :column 7, :line 193, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/flush, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there.", :test true}, children {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Returns the children passed to a component.", :end-column 15, :end-line 170, :column 7, :line 170, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/children, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the children passed to a component.", :test true}, wrap {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(value reset-fn args)], :arglists [[value reset-fn & args]], :arglists-meta (nil)}, :arglists (quote ([value reset-fn & args])), :doc "Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.", :end-column 11, :end-line 213, :column 7, :line 213, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/wrap, :variadic true, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(value reset-fn args)], :arglists [[value reset-fn & args]], :arglists-meta (nil)}, :method-params [(value reset-fn args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists [[value reset-fn & args]], :doc "Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.", :test true}, reactify-component {:protocol-inline nil, :meta {:arglists (quote ([c])), :doc "Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.", :end-column 25, :end-line 52, :column 7, :line 52, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/reactify-component, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.", :test true}, unmount-component-at-node {:protocol-inline nil, :meta {:arglists (quote ([container])), :doc "Remove a component from the given DOM node.", :end-column 32, :end-line 73, :column 7, :line 73, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/unmount-component-at-node, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :doc "Remove a component from the given DOM node.", :test true}, render-component {:meta {:end-column 22, :end-line 86, :column 6, :line 86, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :file "resources/public/js/compiled/out/reagent/core.cljs", :line 86, :column 1, :end-line 86, :end-column 22, :test true, :name reagent.core/render-component}, render-to-string {:protocol-inline nil, :meta {:arglists (quote ([component])), :doc "Turns a component into an HTML string.", :end-column 23, :end-line 78, :column 7, :line 78, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/render-to-string, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 23, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string.", :test true}, cursor {:protocol-inline nil, :meta {:arglists (quote ([src path])), :doc "Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n", :end-column 13, :end-line 236, :column 7, :line 236, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/cursor, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 13, :method-params ([src path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src path])), :doc "Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n", :test true}, state {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))", :end-column 12, :end-line 140, :column 7, :line 140, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/state, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))", :test true}, render-component-to-string {:meta {:end-column 32, :end-line 87, :column 6, :line 87, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :file "resources/public/js/compiled/out/reagent/core.cljs", :line 87, :column 1, :end-line 87, :end-column 32, :test true, :name reagent.core/render-component-to-string}, render-to-static-markup {:protocol-inline nil, :meta {:arglists (quote ([component])), :doc "Turns a component into an HTML string, without data-react-id attributes, etc.", :end-column 30, :end-line 89, :column 7, :line 89, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/render-to-static-markup, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 30, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string, without data-react-id attributes, etc.", :test true}, dom-node {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component.", :end-column 15, :end-line 182, :column 7, :line 182, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/dom-node, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component.", :test true}, is-client {:meta {:end-column 15, :end-line 13, :column 6, :line 13, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :file "resources/public/js/compiled/out/reagent/core.cljs", :line 13, :column 1, :end-line 13, :end-column 15, :test true, :name reagent.core/is-client}, replace-state {:protocol-inline nil, :meta {:arglists (quote ([this new-state])), :doc "Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)", :end-column 20, :end-line 147, :column 7, :line 147, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/replace-state, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 20, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)", :test true}, partial {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists [[f & args]], :arglists-meta (nil)}, :arglists (quote ([f & args])), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :end-column 14, :end-line 273, :column 7, :line 273, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/partial, :variadic true, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists [[f & args]], :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists [[f & args]], :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :test true}, set-state {:protocol-inline nil, :meta {:arglists (quote ([this new-state])), :doc "Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)", :end-column 16, :end-line 155, :column 7, :line 155, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/set-state, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)", :test true}, argv {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component.", :end-column 11, :end-line 176, :column 7, :line 176, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/argv, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component.", :test true}, render {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :end-column 13, :end-line 59, :column 7, :line 59, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/render, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists ([comp container] [comp container callback]), :doc "Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :test true}, create-class {:protocol-inline nil, :meta {:arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n", :end-column 19, :end-line 108, :column 7, :line 108, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/create-class, :variadic false, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 19, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n", :test true}, create-element {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params ([type] [type props] [type props child]), :arglists ([type] [type props] [type props child] [type props child & children]), :arglists-meta (nil nil nil nil)}, :arglists (quote ([type] [type props] [type props child] [type props child & children])), :doc "Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n", :end-column 21, :end-line 15, :column 7, :line 15, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/reagent/core.cljs"}, :name reagent.core/create-element, :variadic true, :file "resources/public/js/compiled/out/reagent/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([type] [type props] [type props child]), :arglists ([type] [type props] [type props child] [type props child & children]), :arglists-meta (nil nil nil nil)}, :method-params ([type] [type props] [type props child]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists ([type] [type props] [type props child] [type props child & children]), :doc "Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n", :test true}}, :imports nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, cljsjs.react cljsjs.react, reagent.impl.template reagent.impl.template, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, tmpl reagent.impl.template, ratom reagent.ratom, deb reagent.debug, batch reagent.impl.batching, reagent.debug reagent.debug}, :uses nil, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug, deb reagent.debug}, :use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, .! reagent.interop}, :excludes #{atom flush partial}, :doc nil, :name reagent.core}