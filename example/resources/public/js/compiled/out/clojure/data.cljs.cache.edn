;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name clojure.data, :imports nil, :requires {clojure.set clojure.set, set clojure.set}, :uses nil, :defs {vectorize {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys", :private true, :end-column 17, :end-line 23, :column 8, :line 23, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :private true, :name clojure.data/vectorize, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys", :test true}, diff {:protocol-inline nil, :meta {:arglists (quote ([a b])), :doc "Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.", :end-column 11, :end-line 144, :column 7, :line 144, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :name clojure.data/diff, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 11, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.", :test true}, atom-diff {:protocol-inline nil, :meta {:arglists (quote ([a b])), :doc "Internal helper for diff.", :private true, :end-column 17, :end-line 17, :column 8, :line 17, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :private true, :name clojure.data/atom-diff, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 17, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Internal helper for diff.", :test true}, diff-set {:protocol-inline nil, :meta {:arglists (quote ([a b])), :private true, :end-column 16, :end-line 69, :column 8, :line 69, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :private true, :name clojure.data/diff-set, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 16, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, equality-partition {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Implementation detail. Subject to change.", :protocol clojure.data/EqualityPartition, :end-column 22, :end-line 77, :column 4, :line 77, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :protocol clojure.data/EqualityPartition, :name clojure.data/equality-partition, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Implementation detail. Subject to change.", :test true}, EqualityPartition {:meta {:protocol-info {:methods {equality-partition [[x]]}}, :protocol-symbol true, :doc "Implementation detail. Subject to change.", :end-column 31, :end-line 75, :column 14, :line 75, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :protocol-symbol true, :name clojure.data/EqualityPartition, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 31, :column 1, :line 75, :protocol-info {:methods {equality-partition [[x]]}}, :info nil, :end-line 75, :impls #{nil boolean number default array string function}, :doc "Implementation detail. Subject to change.", :test true}, diff-associative {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b ks]), :arglists ([a b] [a b ks]), :arglists-meta (nil nil)}, :arglists (quote ([a b] [a b ks])), :doc "Diff associative things a and b, comparing only keys in ks (if supplied).", :private true, :end-column 24, :end-line 49, :column 8, :line 49, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :private true, :name clojure.data/diff-associative, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b ks]), :arglists ([a b] [a b ks]), :arglists-meta (nil nil)}, :method-params ([a b] [a b ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b ks]), :doc "Diff associative things a and b, comparing only keys in ks (if supplied).", :test true}, diff-associative-key {:protocol-inline nil, :meta {:arglists (quote ([a b k])), :doc "Diff associative things a and b, comparing only the key k.", :private true, :end-column 28, :end-line 33, :column 8, :line 33, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :private true, :name clojure.data/diff-associative-key, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 28, :method-params ([a b k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b k])), :doc "Diff associative things a and b, comparing only the key k.", :test true}, diff-similar {:protocol-inline nil, :meta {:arglists (quote ([a b])), :doc "Implementation detail. Subject to change.", :protocol clojure.data/Diff, :end-column 16, :end-line 81, :column 4, :line 81, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :protocol clojure.data/Diff, :name clojure.data/diff-similar, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 16, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Implementation detail. Subject to change.", :test true}, Diff {:meta {:protocol-info {:methods {diff-similar [[a b]]}}, :protocol-symbol true, :doc "Implementation detail. Subject to change.", :end-column 18, :end-line 79, :column 14, :line 79, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :protocol-symbol true, :name clojure.data/Diff, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 18, :column 1, :line 79, :protocol-info {:methods {diff-similar [[a b]]}}, :info nil, :end-line 79, :impls #{nil boolean number default array string function}, :doc "Implementation detail. Subject to change.", :test true}, diff-sequential {:protocol-inline nil, :meta {:arglists (quote ([a b])), :private true, :end-column 23, :end-line 62, :column 8, :line 62, :file "/home/maty/vacuumlabs/clojurescript/example/resources/public/js/compiled/out/clojure/data.cljs"}, :private true, :name clojure.data/diff-sequential, :variadic false, :file "resources/public/js/compiled/out/clojure/data.cljs", :end-column 23, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:map :set :sequential :default :atom], :seen #{:default :sequential :set :atom :map}}, :doc "Non-core data functions."}